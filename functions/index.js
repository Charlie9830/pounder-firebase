!function (t) { var e = {}; function r(o) { if (e[o]) return e[o].exports; var s = e[o] = { i: o, l: !1, exports: {} }; return t[o].call(s.exports, s, s.exports, r), s.l = !0, s.exports } r.m = t, r.c = e, r.d = function (t, e, o) { r.o(t, e) || Object.defineProperty(t, e, { enumerable: !0, get: o }) }, r.r = function (t) { "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t, "__esModule", { value: !0 }) }, r.t = function (t, e) { if (1 & e && (t = r(t)), 8 & e) return t; if (4 & e && "object" == typeof t && t && t.__esModule) return t; var o = Object.create(null); if (r.r(o), Object.defineProperty(o, "default", { enumerable: !0, value: t }), 2 & e && "string" != typeof t) for (var s in t) r.d(o, s, function (e) { return t[e] }.bind(null, s)); return o }, r.n = function (t) { var e = t && t.__esModule ? function () { return t.default } : function () { return t }; return r.d(e, "a", e), e }, r.o = function (t, e) { return Object.prototype.hasOwnProperty.call(t, e) }, r.p = "", r(r.s = 3) }([function (t, e, r) { "use strict"; function o(t, e) { if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function") } Object.defineProperty(e, "__esModule", { value: !0 }); e.DatabaseStore = function t(e, r, s, i, c) { o(this, t), this.projects = e, this.projectLayouts = r, this.taskLists = s, this.tasks = i, this.accountConfig = c }, e.ProjectStore = function t(e, r, s) { o(this, t), this.projectName = e, this.uid = r, this.isRemote = s }, e.RemoteStore = function t(e, r, s, i, c, n) { o(this, t), this.projectName = e, this.uid = r, this.members = s, this.projectLayout = i, this.taskLists = c, this.tasks = n }, e.MemberStore = function t(e, r, s, i, c, n) { o(this, t), this.project = r, this.userId = e, this.displayName = s, this.email = i, this.status = c, this.role = n }, e.ProjectLayoutStore = function t(e, r, s) { o(this, t), this.layouts = e, this.project = r, this.uid = s }, e.TaskListSettingsStore = function t(e, r) { o(this, t), this.isCompleteTasksShown = e, this.sortBy = r }, e.TaskListStore = function t(e, r, s, i, c) { o(this, t), this.taskListName = e, this.project = r, this.uid = s, this.taskListId = i, this.settings = c }, e.TaskStore = function t(e, r, s, i, c, n, a, u, l) { o(this, t), this.taskName = e, this.dueDate = r, this.isComplete = s, this.project = i, this.taskList = c, this.uid = n, this.dateAdded = a, this.isNewTask = u, this.isHighPriority = l }, e.AccountStore = function t(e, r) { o(this, t), this.uid = e, this.favourteProjectId = r }, e.DirectoryStore = function t(e, r, s) { o(this, t), this.email = e, this.displayName = r, this.userId = s }, e.InviteStore = function t(e, r, s, i, c, n, a) { o(this, t), this.projectName = e, this.targetUserId = r, this.sourceUserId = s, this.sourceEmail = i, this.sourceDisplayName = c, this.projectId = n, this.role = a }, e.CssConfigStore = { "--primary-color": "", "--background-color": "", "--surface-color": "", "--surface-color-alternate": "", "--primary-button-background-image": "", "--primary-active-text-color": "", "--primary-inactive-text-color": "", "--primary-hover-color": "", "--alternate-active-text-color": "", "--alternate-inactive-text-color": "", "--loading-spinner-primary-color": "", "--loading-spinner-secondary-color": "", "--task-checkbox-color": "", "--task-text-color": "", "--task-selected-color": "", "--task-hover-color": "", "--task-divider-color": "", "--overdue-color": "", "--soon-color": "", "--later-color": "", "--today-color": "", "--important-color": "", "--due-date-text-color": "", "--due-date-circle-color": "", "--task-list-header-text-color": "", "--task-list-selected-border-color": "", "--task-list-selected-header-color": "", "--database-synced-color": "", "--database-updates-pending-color": "" } }, function (t, e) { t.exports = require("firebase-admin") }, function (t, e) { t.exports = require("firebase-functions") }, function (t, e, r) { "use strict"; r.r(e), r.d(e, "DIRECTORY", function () { return c }), r.d(e, "USERS", function () { return n }), r.d(e, "TASKS", function () { return a }), r.d(e, "TASKLISTS", function () { return u }), r.d(e, "PROJECTS", function () { return l }), r.d(e, "PROJECTLAYOUTS", function () { return d }), r.d(e, "ACCOUNT", function () { return h }), r.d(e, "ACCOUNT_DOC_ID", function () { return p }), r.d(e, "INVITES", function () { return f }), r.d(e, "REMOTES", function () { return m }), r.d(e, "REMOTE_IDS", function () { return y }), r.d(e, "MEMBERS", function () { return g }); var o = r(0); const s = r(2), i = r(1), c = "directory", n = "users", a = "tasks", u = "taskLists", l = "projects", d = "projectLayouts", h = "account", p = "primary", f = "invites", m = "remotes", y = "remoteIds", g = "members"; i.initializeApp({ credential: i.credential.applicationDefault(), databaseURL: "https://halo-todo.firebaseio.com" }), exports.addUserToDirectory = s.auth.user().onCreate(t => { i.firestore().collection(c).doc(t.email).set(Object.assign({}, new o.DirectoryStore(t.email.toLowerCase(), t.displayName, t.uid))).then(() => { }) }), exports.removeUserFromDirectory = s.auth.user().onDelete(t => { i.firestore().collection(c).doc(t.email).delete().then(() => { }) }), exports.getRemoteUserData = s.https.onCall((t, e) => { var r = t.targetEmail; return i.firestore().collection(c).doc(r).get().then(t => t.exists ? { status: "user found", userData: t.data() } : { status: "user not found", userData: {} }) }), exports.sendProjectInvite = s.https.onCall((t, e) => { var r = t.projectName, s = t.sourceEmail, c = t.sourceDisplayName, a = t.projectId, u = t.targetUserId, l = t.targetDisplayName, d = t.targetEmail, h = e.auth.uid, p = t.role, y = new o.InviteStore(r, u, h, s, c, a, p); return i.firestore().collection(n).doc(u).collection(f).doc(a).set(Object.assign({}, y)).then(() => { var t = new o.MemberStore(u, a, l, d, "pending", p); return i.firestore().collection(m).doc(a).collection(g).doc(u).set(Object.assign({}, t)).then(() => ({ status: "complete" })).catch(t => ({ status: "error", error: "Error while setting user into members: " + t.message })) }).catch(t => ({ status: "error", error: t.message })) }), exports.kickUserFromProject = s.https.onCall((t, e) => { var r = t.projectId, o = t.userId, s = i.firestore().batch(); return s.delete(i.firestore().collection(m).doc(r).collection(g).doc(o)), s.delete(i.firestore().collection(n).doc(o).collection(y).doc(r)), s.delete(i.firestore().collection(n).doc(o).collection(f).doc(r)), s.commit().then(() => ({ status: "complete" })).catch(t => ({ status: "error", message: "Error occured while Kicking user: " + t.message })) }), exports.acceptProjectInvite = s.https.onCall((t, e) => { var r = t.projectId, o = e.auth.uid, s = i.firestore().batch(), c = i.firestore().collection(m).doc(r).collection(g).doc(o); s.update(c, { status: "added" }); var a = i.firestore().collection(n).doc(o).collection(y).doc(r); return s.set(a, { projectId: r }), s.commit().then(() => ({ status: "complete" })).catch(t => ({ status: "error", message: "Error occured accepting project invite. " + t.message })) }), exports.denyProjectInvite = s.https.onCall((t, e) => { var r = t.projectId, o = e.auth.uid; return i.firestore().collection(m).doc(r).collection(g).doc(o).update({ status: "rejected invite" }).then(() => ({ status: "complete" })).catch(t => ({ status: "error", message: "Error occured whilst denying project invite." + t.message })) }) }]);